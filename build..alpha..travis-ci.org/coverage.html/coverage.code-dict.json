{"/home/travis/build/npmtest/node-npmtest-simple-ssh/test.js":"/* istanbul instrument in package npmtest_simple_ssh */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-simple-ssh/lib.npmtest_simple_ssh.js":"/* istanbul instrument in package npmtest_simple_ssh */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_simple_ssh = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_simple_ssh = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-simple-ssh/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-simple-ssh && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_simple_ssh */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_simple_ssh\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_simple_ssh.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_simple_ssh.rollup.js'] =\n            local.assetsDict['/assets.npmtest_simple_ssh.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_simple_ssh.__dirname +\n                    '/lib.npmtest_simple_ssh.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-simple-ssh/node_modules/simple-ssh/lib/ssh.js":"'use strict';\r\n\r\nvar Connection = require('ssh2'),\r\n    extend = require('xtend');\r\n\r\n/**\r\n * Creates a new SSH connection\r\n * @param {Object}  config\r\n * @param {String}  config.host             - Host to connect to\r\n * @param {Number} [config.port=22]         - Port number\r\n * @param {String}  config.user             - Username\r\n * @param {String}  config.pass             - Password\r\n * @param {String} [config.passphrase='']    - Passphrase\r\n * @param {String} [config.baseDir='']      - Base directory to perform commands from\r\n * @param {String} [config.agent='']        - SSH Agent to connect with\r\n * @param {String} [config.agentForward=''] - Use agent forwarding\r\n * @constructor\r\n */\r\nvar SSH = function(config) {\r\n    config = extend({\r\n        host: '',\r\n        port: 22,\r\n        user: '',\r\n        pass: '',\r\n        passphrase: '',\r\n        timeout: 10000,\r\n        key:  '',\r\n        baseDir: '',\r\n        agent: '',\r\n        agentForward: ''\r\n    }, config);\r\n\r\n    this._c = new Connection();\r\n    this._commands = [];\r\n\r\n    this.host         = config.host;\r\n    this.port         = config.port;\r\n    this.user         = config.user;\r\n    this.pass         = config.pass;\r\n    this.timeout      = config.timeout;\r\n    this.key          = config.key;\r\n    this.passphrase   = config.passphrase;\r\n    this.baseDir      = config.baseDir;\r\n    this.agent        = config.agent;\r\n    this.agentForward = config.agentForward;\r\n};\r\n\r\n/**\r\n * Helper function for queueing up the next command in the chain\r\n * @param {Number} index - Array index of the command to perform next\r\n * @private\r\n */\r\nSSH.prototype._queueCommand = function(index) {\r\n    if (this._commands.length <= index) {\r\n        return;\r\n    }\r\n\r\n    var self = this,\r\n        command = this._commands[index],\r\n        cmd = command.cmd;\r\n\r\n    // Start by going to the base directory, if set\r\n    if (this.baseDir.length > 0) {\r\n        cmd = 'cd ' + this.baseDir + ' && ' + cmd;\r\n    }\r\n\r\n    // Execute the command\r\n    this._c.exec(cmd, { pty: command.pty }, function(err, stream) {\r\n        command.handlers.start();\r\n        if (err) {\r\n            command.handlers.err(err);\r\n            return;\r\n        }\r\n\r\n        var passwordSent = false,\r\n            buffer = '',\r\n            stdout = '',\r\n            stderr = '';\r\n\r\n        stream.stderr.on('data', function(data) {\r\n            data = data.toString();\r\n            stderr += data;\r\n            command.handlers.err = command.handlers.err || function() {\r\n                console.log(data);\r\n            };\r\n            command.handlers.err(data);\r\n        });\r\n\r\n        stream.on('data', function(data) {\r\n            // This will allow us to send in the password if we're doing something like `sudo`\r\n            buffer += (!passwordSent) ? data.toString() : '';\r\n\r\n            if (!passwordSent && buffer.substr(-2) === ': ') {\r\n                stream.write(self.pass + '\\n');\r\n                buffer = '';\r\n                passwordSent = true;\r\n            } else {\r\n                data = data.toString();\r\n                stdout += data;\r\n                command.handlers.out(data);\r\n            }\r\n        });\r\n\r\n        stream.on('exit', function(code) {\r\n            var numOfCommands = self._commands.length,\r\n                executeNext = (command.handlers.exit(+code, stdout, stderr) !== false);\r\n\r\n            // Queue up the next command\r\n            if (executeNext && index < self._commands.length - 1) {\r\n                self._queueCommand(index + 1);\r\n            } else if (!executeNext) {\r\n                // If the commands have been modified during the last exit, use those\r\n                if (numOfCommands !== self._commands.length) {\r\n                    self._commands.splice(0, numOfCommands);\r\n                    self._queueCommand(0);\r\n                } else {\r\n                    self._c.end();\r\n                }\r\n            } else if (index === self._commands.length - 1) {\r\n                self._c.end();\r\n            }\r\n        });\r\n        if (command.in) stream.end(command.in);\r\n    });\r\n};\r\n\r\n/**\r\n * Queues up a command for execution\r\n * @param {String}            command            - Command to execute\r\n * @param {Object}            options\r\n * @param {String[]}         [options.args]      - Additional command line arguments\r\n * @param {Function(String)} [options.out]       - Called to capture stdout\r\n * @param {Function(String)} [options.err]       - Called to capture stderr\r\n * @param {Function(Number)} [options.exit]      - Called when the command exits\r\n * @param {Boolean}          [options.pty=false] - If true, allocates a pseudo-tty (useful for sudo)\r\n * @return {SSH}\r\n */\r\nSSH.prototype.exec = function(command, options) {\r\n    options = extend({\r\n        args: null,\r\n        start: function(){},\r\n        in:   null,\r\n        out:  function(){},\r\n        err:  function(){},\r\n        exit: function(){},\r\n        pty:  false\r\n    }, options);\r\n\r\n    // Apply additional command line arguments\r\n    if (options.args !== null) {\r\n        command += ' ' + options.args.join(' ');\r\n    }\r\n\r\n    this._commands.push({\r\n        cmd: command,\r\n        in:   options.in,\r\n        handlers: {\r\n            start: options.start,\r\n            out:  options.out,\r\n            err:  options.err,\r\n            exit: options.exit\r\n        },\r\n        pty: options.pty\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Starts executing the queued up commands\r\n * @param {Object}          [options]\r\n * @param {Function}        [options.success] - Executed once connected\r\n * @param {Function(Error)} [options.fail]    - Executed if we fail to connect\r\n */\r\nSSH.prototype.start = function(options) {\r\n    options = extend({\r\n        success: function(){},\r\n        fail: function(){}\r\n    }, options);\r\n    var self = this;\r\n\r\n    self._c.on('error', options.fail);\r\n\r\n    self._c.on('ready', function() {\r\n        self._c.removeListener('error', options.fail);\r\n        options.success();\r\n\r\n        if (self._commands.length > 0) {\r\n            self._queueCommand(0);\r\n        } else {\r\n            self._c.end();\r\n        }\r\n    });\r\n    if (self.pass && !self.key) {\r\n        self._c.connect({\r\n            host: self.host,\r\n            port: self.port || 22,\r\n            username: self.user,\r\n            password: self.pass,\r\n            readyTimeout: self.timeout\r\n        });\r\n      } else if (!self.pass && self.key) {\r\n        if(self.passphrase){\r\n          self._c.connect({\r\n            host: self.host,\r\n            port: self.port || 22,\r\n            username: self.user,\r\n            privateKey: self.key,\r\n            passphrase: self.passphrase,\r\n            readyTimeout: self.timeout\r\n          });\r\n        }\r\n        else {\r\n          self._c.connect({\r\n            host: self.host,\r\n            port: self.port || 22,\r\n            username: self.user,\r\n            privateKey: self.key,\r\n            readyTimeout: self.timeout\r\n          });\r\n        }\r\n      } else if ((self.passphrase || self.pass) && self.key) {\r\n            try {\r\n                self._c.connect({\r\n                    host: self.host,\r\n                    port: self.port || 22,\r\n                    username: self.user,\r\n                    privateKey: self.key,\r\n                    passphrase: self.passphrase || self.pass,\r\n                    readyTimeout: self.timeout\r\n                });\r\n            } catch (err) {\r\n                self._c.emit('error', new Error('Incorrect passphrase: ' + err.toString()));\r\n\r\n                return this;\r\n            }\r\n    } else {\r\n        self._c.connect({\r\n            host: self.host,\r\n            port: self.port || 22,\r\n            username: self.user,\r\n            agent: self.agent,\r\n            agentForward: self.agentForward,\r\n            readyTimeout: self.timeout\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * Resets the connection and commands\r\n * @param {Function(Error)} [cb] - Executed when the connection and commands have been reset\r\n */\r\nSSH.prototype.reset = function(cb) {\r\n    cb = cb || function(){};\r\n    if (this._c._sock !== undefined && this._c._state !== 'closed') {\r\n        var self = this;\r\n        this._c.on('close', function(err) {\r\n            self._c = new Connection();\r\n            self._commands = [];\r\n            cb(err);\r\n        });\r\n        this._c.end();\r\n    } else {\r\n        this._c = new Connection();\r\n        this._commands = [];\r\n        cb();\r\n    }\r\n};\r\n\r\n/**\r\n * Returns the number of commands in the queue\r\n * @return {Number}\r\n */\r\nSSH.prototype.count = function() {\r\n    return this._commands.length;\r\n};\r\n\r\n/**\r\n * Ends the SSH connection\r\n */\r\nSSH.prototype.end = function() {\r\n    this._c.end();\r\n};\r\n\r\n/**\r\n * A wrapper method to access ssh2's events\r\n * @param {String}   event\r\n * @param {Function} callback\r\n * @return {SSH}\r\n */\r\nSSH.prototype.on = function(event, callback) {\r\n    this._c.on(event, callback);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event handler from ssh2\r\n * @param {String}   event\r\n * @param {Function} callback\r\n * @return {SSH}\r\n */\r\nSSH.prototype.off = function(event, callback) {\r\n    this._c.off(event, callback);\r\n    return this;\r\n};\r\n\r\nmodule.exports = SSH;\r\n","/home/travis/build/npmtest/node-npmtest-simple-ssh/node_modules/simple-ssh/Gruntfile.js":"'use strict';\r\n\r\nmodule.exports = function(grunt) {\r\n\r\n    var PROJECT_FILES = ['Gruntfile.js', 'lib/**/*.js', 'test/**/*.js'];\r\n\r\n    grunt.loadNpmTasks('grunt-contrib-jshint');\r\n    grunt.loadNpmTasks('grunt-contrib-watch');\r\n    grunt.loadNpmTasks('grunt-simple-mocha');\r\n\r\n    grunt.initConfig({\r\n        jshint: {\r\n            options: {\r\n                jshintrc: '.jshintrc'\r\n            },\r\n            all: {\r\n                files: {\r\n                    src: PROJECT_FILES\r\n                }\r\n            }\r\n        },\r\n\r\n        watch: {\r\n            all: {\r\n                files: PROJECT_FILES,\r\n                tasks: ['jshint:all']\r\n            },\r\n            test: {\r\n                files: PROJECT_FILES,\r\n                tasks: ['jshint:all', 'simplemocha:all']\r\n            }\r\n        },\r\n\r\n        simplemocha: {\r\n            options: {\r\n                timeout: 10000,\r\n                ui: 'bdd',\r\n                reporter: 'spec'\r\n            },\r\n            all: {\r\n                src: ['test/**/*.js']\r\n            }\r\n        }\r\n    });\r\n\r\n    grunt.registerTask('default', ['jshint:all', 'simplemocha:all']);\r\n    grunt.registerTask('test', 'watch:test');\r\n\r\n};"}